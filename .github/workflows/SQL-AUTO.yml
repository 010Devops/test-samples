name: Test SQL auto workflow

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  Test-SQL-Workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect Changed SQL Files Since Last Deployment
        id: detect_sql_files
        run: |
          # Check if the last-deploy tag exists
          if git rev-parse last-deploy >/dev/null 2>&1; then
            # If the tag exists, get the changed files since the last deployment
            echo "Tag 'last-deploy' already exists. Updating..."
            changed_files=$(git diff --name-only last-deploy HEAD | grep -E '\.sql$')
          else
            # If no tag exists (first deployment), check the current commit
             echo "Tag 'last-deploy' does not exist. Checking for changes in the current commit..."  
            # Use a safer method to check for the previous commit
            if git rev-parse --quiet --verify HEAD^ >/dev/null 2>&1; then
              # If HEAD^ exists, compare with it
              changed_files=$(git diff --name-only HEAD^ HEAD | grep -E '\.sql$')
            else
              # If this is the very first commit, we don't have HEAD^
              changed_files=$(git diff --name-only HEAD | grep -E '\.sql$' || echo "")
            fi
          fi
      
          if [ -z "$changed_files" ]; then
            echo "No SQL files were changed."
            exit 0
          fi
      
          # Convert list of files to JSON array
          sql_files_json=$(echo "$changed_files" | jq -R -s 'split("\n") | map(select(. != ""))')
      
          echo "Changed SQL Files: $sql_files_json"
          echo "::set-output name=FILES_JSON::$sql_files_json"
        shell: bash

      - name: Tag the Latest Commit After Successful Deployment
        if: success()  # Only tag if deployment was successful
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git tag -f last-deploy  # Force update the tag
          git push origin last-deploy --force

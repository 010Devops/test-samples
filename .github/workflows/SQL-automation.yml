name: Test SQL workflow

on:
  workflow_dispatch:
    inputs:
      Folder_name:
        description: 'Select a SQL folder name'
        required: true
        type: choice
        options:
          - 'Select a Folder'
          - \\Database\\DB\\dbo\\Tables\\
          - \\Database\\DB\\custom_scripts\\
      Dev_SQL_file_name:
        description: 'Enter Dev SQL file name'
        required: true

jobs:
  Test-SQL-Workflow:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.Folder_name != 'Select a SQL folder name' && github.event.inputs.Dev_SQL_file_name != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Validate SQL File Name
      #   run: |
      #     if [[ "${{ github.event.inputs.Dev_SQL_file_name }}" != *.sql ]]; then
      #       echo "Error: The file name must have a .sql extension."
      #       exit 1
      #     fi
          
      - name: Set SQL Script Path
        id: set_sql_path
        run:  |
          SQL_SCRIPT_PATH="${{ vars.SCRIPTPATH }}${{ github.event.inputs.Folder_name }}${{ github.event.inputs.Dev_SQL_file_name }}"
          echo "SQL_SCRIPT_PATH=$SQL_SCRIPT_PATH"  >> $GITHUB_ENV

      - name: Test ENV
        run: |
          echo "ENV value: $SQL_SCRIPT_PATH"
          
      # - name: Set Multiple SQL Script Paths
      #   run: |     
      #     # Base path with escaped backslashes
      #     BASE_PATH="${{ vars.SCRIPT_PATH }}${{ github.event.inputs.Folder_name }}"
      
      #     # Replace any backslashes with double backslashes
      #     BASE_PATH="${BASE_PATH//\\/\\\\}"

      #     echo "BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
      #   shell: bash

      # - name: Set Multiple SQL Script Paths
      #   id: set_sql_paths
      #   uses: actions/github-script@v6
      #   with:
      #     script: |           
      #       const basePath = "${{ vars.SCRIPTPATH }}${{ github.event.inputs.Folder_name }}";
      #       const fileArray = '${{ github.event.inputs.Dev_SQL_file_name }}'.split(',');
      #       console.log('basepath: ', basePath);
      #       console.log('filearray: ', fileArray);

      #       const invalidFiles = fileArray.filter(fileName => {
      #         return !fileName.endsWith('.sql') || fileName.includes(' ');
      #       });
      
      #       if (invalidFiles.length > 0) {
      #         core.setFailed(`Files with invalid extensions found: ${invalidFiles.join(', ')}`);
      #       }
      #       // Construct the full paths and store them in an array
      #       const filesJson = fileArray
      #         .filter(fileName => fileName.endsWith('.sql'))
      #         .map(fileName => basePath + fileName);
            
      #       console.log('File paths set:', filesJson);
      
      #       // Set the JSON array as an output
      #       core.exportVariable('FILES_JSON', JSON.stringify(filesJson));
        
      # - name: Test ENV
      #   run: |
      #     echo "JSON value: ${{ env.FILES_JSON }}"
      #     echo "ENV value: $FILES_JSON"

      - name: Set SQL Script Paths
        uses: actions/github-script@v6
        with:
          script: |
            const basePath = "${{ vars.AZURE_SCRIPT_PATH }}${{ github.event.inputs.Folder_name }}";
            const inputFiles = '${{ github.event.inputs.Dev_SQL_file_name }}';
            console.log('input:',inputFiles);
            // Regular expression to match filenames with .sql extension
            const regex = /([^\s]+\.sql)/g;

            // Validate if the input is comma-separated
            const isCommaSeparated = inputFiles.includes(',');
            console.log('comma: ',isCommaSeparated);
            // Extract valid filenames using regex
            let fileArray = inputFiles.match(regex);
            console.log('array: ',fileArray);
            console.log('fileArray: ',fileArray);
            if (fileArray) {
              if (isCommaSeparated) {
                const joinedFiles = fileArray.join(',');
                console.log('join:',joinedFiles);
                if (joinedFiles !== inputFiles) {
                  core.setFailed(`Multiple filenames are not properly comma-separated or invalid extension: ${inputFiles}`);
                  return;
                } else {
                    fileArray = inputFiles.split(',');
                }
              } else {
                fileArray = inputFiles.split('.sql');
                console.log('arr: ',fileArray);
                if (fileArray.length > 1) {
                  core.setFailed(`Multiple filenames must be comma-separated: ${inputFiles}`);
                  return;
                }
              }

              // Check for invalid files
              const invalidFiles = fileArray.filter(fileName => !fileName.endsWith('.sql') || fileName.includes(' '));
              
              if (invalidFiles.length > 0) {
                core.setFailed(`Files with invalid extensions or spaces found: ${invalidFiles.join(', ')}`);
                return;
              }

              // Construct the full paths for SQL files
              const filesJson = fileArray
                .filter(fileName => fileName.endsWith('.sql') && !fileName.includes(' '))
                .map(fileName => basePath + fileName);
              console.log('jsonfile: ',filesJson);
              // Set the JSON array as an output
              core.exportVariable('FILES_JSON1', JSON.stringify(filesJson));

            } else {
              core.setFailed('No valid .sql filenames found in the input.');
            }

      - name: Test ENV
        run: |
          echo "JSON value: ${{ env.FILES_JSON1 }}"
          echo "ENV value: $FILES_JSON1"
